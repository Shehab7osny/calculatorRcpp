// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// add
float add(float firstOperand, float secondOperand);
RcppExport SEXP _calculatorRcpp_add(SEXP firstOperandSEXP, SEXP secondOperandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type firstOperand(firstOperandSEXP);
    Rcpp::traits::input_parameter< float >::type secondOperand(secondOperandSEXP);
    rcpp_result_gen = Rcpp::wrap(add(firstOperand, secondOperand));
    return rcpp_result_gen;
END_RCPP
}
// subtract
float subtract(float firstOperand, float secondOperand);
RcppExport SEXP _calculatorRcpp_subtract(SEXP firstOperandSEXP, SEXP secondOperandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type firstOperand(firstOperandSEXP);
    Rcpp::traits::input_parameter< float >::type secondOperand(secondOperandSEXP);
    rcpp_result_gen = Rcpp::wrap(subtract(firstOperand, secondOperand));
    return rcpp_result_gen;
END_RCPP
}
// multiply
float multiply(float firstOperand, float secondOperand);
RcppExport SEXP _calculatorRcpp_multiply(SEXP firstOperandSEXP, SEXP secondOperandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type firstOperand(firstOperandSEXP);
    Rcpp::traits::input_parameter< float >::type secondOperand(secondOperandSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply(firstOperand, secondOperand));
    return rcpp_result_gen;
END_RCPP
}
// divide
float divide(float firstOperand, float secondOperand);
RcppExport SEXP _calculatorRcpp_divide(SEXP firstOperandSEXP, SEXP secondOperandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type firstOperand(firstOperandSEXP);
    Rcpp::traits::input_parameter< float >::type secondOperand(secondOperandSEXP);
    rcpp_result_gen = Rcpp::wrap(divide(firstOperand, secondOperand));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_calculatorRcpp_add", (DL_FUNC) &_calculatorRcpp_add, 2},
    {"_calculatorRcpp_subtract", (DL_FUNC) &_calculatorRcpp_subtract, 2},
    {"_calculatorRcpp_multiply", (DL_FUNC) &_calculatorRcpp_multiply, 2},
    {"_calculatorRcpp_divide", (DL_FUNC) &_calculatorRcpp_divide, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_calculatorRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
